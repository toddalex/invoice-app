{"ast":null,"code":"const got = require('got');\n\nconst money = require('money');\n\nconst FIXER_URL = 'https://api.fixer.io/latest';\nconst BLOCKCHAIN_URL = 'https://blockchain.info/ticker';\nconst ETHERCHAIN_URL = 'https://etherchain.org/api/statistics/price';\nconst CURRENCY_BITCOIN = 'BTC';\nconst CURRENCY_ETHEREUM = 'ETH';\n\nlet isAnyBTC = (from, to) => [from, to].includes(CURRENCY_BITCOIN);\n\nlet isAnyETH = (from, to) => [from, to].includes(CURRENCY_ETHEREUM);\n\nconst httpOpts = {\n  json: true\n};\n\nmodule.exports = opts => {\n  let {\n    amount = 1,\n    from = 'USD',\n    to = CURRENCY_BITCOIN\n  } = opts;\n  let base = from;\n  let promises = [];\n  const anyBTC = isAnyBTC(from, to);\n  const anyETH = isAnyETH(from, to);\n\n  if (anyBTC) {\n    base = from === CURRENCY_BITCOIN ? to : from;\n    promises.push(got(BLOCKCHAIN_URL, httpOpts));\n  }\n\n  if (anyETH) {\n    // always default base to USD when dealing with Etherum\n    base = 'USD';\n    promises.push(got(ETHERCHAIN_URL, httpOpts));\n  }\n\n  promises.unshift(got(`${FIXER_URL}?base=${base}`, httpOpts));\n  return Promise.all(promises).then(result => {\n    let [fixer] = result;\n    money.base = fixer.body.base;\n    money.rates = fixer.body.rates;\n    let conversionOpts = {\n      from,\n      to\n    };\n\n    if (anyBTC) {\n      let blockchain = result.find(r => r.body.hasOwnProperty(base));\n      Object.assign(money.rates, {\n        BTC: blockchain.body[base].last\n      });\n    }\n\n    if (anyETH) {\n      let etherchain = result.find(r => r.body.hasOwnProperty('data') && r.body.status === 1);\n      let {\n        usd\n      } = etherchain.body.data[etherchain.body.data.length - 1];\n      let ethTo = to === CURRENCY_ETHEREUM ? from : to;\n      let etherumConversionOpts = {\n        from: 'USD',\n        // always convert from USD\n        to: ethTo\n      };\n      let eth = money.convert(usd, etherumConversionOpts); // set proper base\n\n      money.base = ethTo;\n      Object.assign(money.rates, {\n        ETH: eth\n      });\n    }\n\n    if (anyBTC || anyETH) {\n      // swap the conversion opts\n      Object.assign(conversionOpts, {\n        from: to,\n        to: from\n      });\n    }\n\n    return money.convert(amount, conversionOpts);\n  });\n};","map":{"version":3,"sources":["/Users/toddalexander/Documents/Github/invoice-app/node_modules/currency/index.js"],"names":["got","require","money","FIXER_URL","BLOCKCHAIN_URL","ETHERCHAIN_URL","CURRENCY_BITCOIN","CURRENCY_ETHEREUM","isAnyBTC","from","to","includes","isAnyETH","httpOpts","json","module","exports","opts","amount","base","promises","anyBTC","anyETH","push","unshift","Promise","all","then","result","fixer","body","rates","conversionOpts","blockchain","find","r","hasOwnProperty","Object","assign","BTC","last","etherchain","status","usd","data","length","ethTo","etherumConversionOpts","eth","convert","ETH"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAME,SAAS,GAAG,6BAAlB;AACA,MAAMC,cAAc,GAAG,gCAAvB;AACA,MAAMC,cAAc,GAAG,6CAAvB;AAEA,MAAMC,gBAAgB,GAAG,KAAzB;AACA,MAAMC,iBAAiB,GAAG,KAA1B;;AAEA,IAAIC,QAAQ,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc,CAACD,IAAD,EAAOC,EAAP,EAAWC,QAAX,CAAoBL,gBAApB,CAA7B;;AACA,IAAIM,QAAQ,GAAG,CAACH,IAAD,EAAOC,EAAP,KAAc,CAACD,IAAD,EAAOC,EAAP,EAAWC,QAAX,CAAoBJ,iBAApB,CAA7B;;AAEA,MAAMM,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE;AADS,CAAjB;;AAIAC,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,MAAI;AACFC,IAAAA,MAAM,GAAG,CADP;AAEFT,IAAAA,IAAI,GAAG,KAFL;AAGFC,IAAAA,EAAE,GAAGJ;AAHH,MAIAW,IAJJ;AAMA,MAAIE,IAAI,GAAGV,IAAX;AACA,MAAIW,QAAQ,GAAG,EAAf;AAEA,QAAMC,MAAM,GAAGb,QAAQ,CAACC,IAAD,EAAOC,EAAP,CAAvB;AACA,QAAMY,MAAM,GAAGV,QAAQ,CAACH,IAAD,EAAOC,EAAP,CAAvB;;AAEA,MAAIW,MAAJ,EAAY;AACVF,IAAAA,IAAI,GAAIV,IAAI,KAAKH,gBAAV,GAA8BI,EAA9B,GAAmCD,IAA1C;AACAW,IAAAA,QAAQ,CAACG,IAAT,CAAcvB,GAAG,CAACI,cAAD,EAAiBS,QAAjB,CAAjB;AACD;;AAED,MAAIS,MAAJ,EAAY;AACV;AACAH,IAAAA,IAAI,GAAG,KAAP;AACAC,IAAAA,QAAQ,CAACG,IAAT,CAAcvB,GAAG,CAACK,cAAD,EAAiBQ,QAAjB,CAAjB;AACD;;AAEDO,EAAAA,QAAQ,CAACI,OAAT,CAAiBxB,GAAG,CAAE,GAAEG,SAAU,SAAQgB,IAAK,EAA3B,EAA8BN,QAA9B,CAApB;AAEA,SAAOY,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsBO,IAAtB,CAA2BC,MAAM,IAAI;AAC1C,QAAI,CAACC,KAAD,IAAUD,MAAd;AAEA1B,IAAAA,KAAK,CAACiB,IAAN,GAAaU,KAAK,CAACC,IAAN,CAAWX,IAAxB;AACAjB,IAAAA,KAAK,CAAC6B,KAAN,GAAcF,KAAK,CAACC,IAAN,CAAWC,KAAzB;AAEA,QAAIC,cAAc,GAAG;AACnBvB,MAAAA,IADmB;AAEnBC,MAAAA;AAFmB,KAArB;;AAKA,QAAIW,MAAJ,EAAY;AACV,UAAIY,UAAU,GAAGL,MAAM,CAACM,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACL,IAAF,CAAOM,cAAP,CAAsBjB,IAAtB,CAAjB,CAAjB;AAEAkB,MAAAA,MAAM,CAACC,MAAP,CAAcpC,KAAK,CAAC6B,KAApB,EAA2B;AACzBQ,QAAAA,GAAG,EAAEN,UAAU,CAACH,IAAX,CAAgBX,IAAhB,EAAsBqB;AADF,OAA3B;AAGD;;AAED,QAAIlB,MAAJ,EAAY;AACV,UAAImB,UAAU,GAAGb,MAAM,CAACM,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACL,IAAF,CAAOM,cAAP,CAAsB,MAAtB,KAAiCD,CAAC,CAACL,IAAF,CAAOY,MAAP,KAAkB,CAApE,CAAjB;AACA,UAAI;AAACC,QAAAA;AAAD,UAAQF,UAAU,CAACX,IAAX,CAAgBc,IAAhB,CAAqBH,UAAU,CAACX,IAAX,CAAgBc,IAAhB,CAAqBC,MAArB,GAA8B,CAAnD,CAAZ;AAEA,UAAIC,KAAK,GAAGpC,EAAE,KAAKH,iBAAP,GAA2BE,IAA3B,GAAkCC,EAA9C;AAEA,UAAIqC,qBAAqB,GAAG;AAC1BtC,QAAAA,IAAI,EAAE,KADoB;AACb;AACbC,QAAAA,EAAE,EAAEoC;AAFsB,OAA5B;AAKA,UAAIE,GAAG,GAAG9C,KAAK,CAAC+C,OAAN,CAAcN,GAAd,EAAmBI,qBAAnB,CAAV,CAXU,CAaV;;AACA7C,MAAAA,KAAK,CAACiB,IAAN,GAAa2B,KAAb;AAEAT,MAAAA,MAAM,CAACC,MAAP,CAAcpC,KAAK,CAAC6B,KAApB,EAA2B;AACzBmB,QAAAA,GAAG,EAAEF;AADoB,OAA3B;AAGD;;AAED,QAAI3B,MAAM,IAAIC,MAAd,EAAsB;AACpB;AACAe,MAAAA,MAAM,CAACC,MAAP,CAAcN,cAAd,EAA8B;AAC5BvB,QAAAA,IAAI,EAAEC,EADsB;AAE5BA,QAAAA,EAAE,EAAED;AAFwB,OAA9B;AAID;;AAED,WAAOP,KAAK,CAAC+C,OAAN,CAAc/B,MAAd,EAAsBc,cAAtB,CAAP;AACD,GAjDM,CAAP;AAkDD,CA5ED","sourcesContent":["const got = require('got')\nconst money = require('money')\n\nconst FIXER_URL = 'https://api.fixer.io/latest'\nconst BLOCKCHAIN_URL = 'https://blockchain.info/ticker'\nconst ETHERCHAIN_URL = 'https://etherchain.org/api/statistics/price'\n\nconst CURRENCY_BITCOIN = 'BTC'\nconst CURRENCY_ETHEREUM = 'ETH'\n\nlet isAnyBTC = (from, to) => [from, to].includes(CURRENCY_BITCOIN)\nlet isAnyETH = (from, to) => [from, to].includes(CURRENCY_ETHEREUM)\n\nconst httpOpts = {\n  json: true\n}\n\nmodule.exports = (opts) => {\n  let {\n    amount = 1,\n    from = 'USD',\n    to = CURRENCY_BITCOIN\n  } = opts\n\n  let base = from\n  let promises = []\n\n  const anyBTC = isAnyBTC(from, to)\n  const anyETH = isAnyETH(from, to)\n\n  if (anyBTC) {\n    base = (from === CURRENCY_BITCOIN) ? to : from\n    promises.push(got(BLOCKCHAIN_URL, httpOpts))\n  }\n\n  if (anyETH) {\n    // always default base to USD when dealing with Etherum\n    base = 'USD'\n    promises.push(got(ETHERCHAIN_URL, httpOpts))\n  }\n\n  promises.unshift(got(`${FIXER_URL}?base=${base}`, httpOpts))\n\n  return Promise.all(promises).then(result => {\n    let [fixer] = result\n\n    money.base = fixer.body.base\n    money.rates = fixer.body.rates\n\n    let conversionOpts = {\n      from,\n      to\n    }\n\n    if (anyBTC) {\n      let blockchain = result.find(r => r.body.hasOwnProperty(base))\n\n      Object.assign(money.rates, {\n        BTC: blockchain.body[base].last\n      })\n    }\n\n    if (anyETH) {\n      let etherchain = result.find(r => r.body.hasOwnProperty('data') && r.body.status === 1)\n      let {usd} = etherchain.body.data[etherchain.body.data.length - 1]\n\n      let ethTo = to === CURRENCY_ETHEREUM ? from : to\n\n      let etherumConversionOpts = {\n        from: 'USD', // always convert from USD\n        to: ethTo\n      }\n\n      let eth = money.convert(usd, etherumConversionOpts)\n\n      // set proper base\n      money.base = ethTo\n\n      Object.assign(money.rates, {\n        ETH: eth\n      })\n    }\n\n    if (anyBTC || anyETH) {\n      // swap the conversion opts\n      Object.assign(conversionOpts, {\n        from: to,\n        to: from\n      })\n    }\n\n    return money.convert(amount, conversionOpts)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}